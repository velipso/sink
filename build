#!/bin/bash

set -e

C_OPTS="-fwrapv -Werror"

pushd "$(dirname "$0")" > /dev/null
SCRIPT_DIR="$(pwd)"
popd > /dev/null
SRC_DIR=$SCRIPT_DIR/src
TGT_DIR=$SCRIPT_DIR/tgt
DIST_DIR=$TGT_DIR/dist
LIB_DIR=$SCRIPT_DIR/lib
DIST_DIR=$SCRIPT_DIR/dist

BUILD_TS=0
BUILD_C=0
BUILD_DEBUG=0
BUILD_MEM=0

case "$1" in
	"all")
		BUILD_TS=1
		BUILD_C=1
		if [ "$2" = "debug" ]; then
			BUILD_DEBUG=1
		fi
		;;
	"ts")
		BUILD_TS=1
		if [ "$2" = "debug" ]; then
			BUILD_DEBUG=1
		fi
		;;
	"c")
		BUILD_C=1
		if [ "$2" = "debug" ]; then
			BUILD_DEBUG=1
		fi
		;;
	"debug")
		BUILD_TS=1
		BUILD_C=1
		BUILD_DEBUG=1
		;;
	"mem")
		BUILD_C=1
		BUILD_MEM=1
		;;
	"clean")
		echo Cleaning...
		rm -rf "$TGT_DIR"
		echo Done
		exit 0
		;;
	"dist")
		echo Publishing builds to ./dist
		find dist -type f -maxdepth 1 -delete
		mkdir -p "$DIST_DIR"/windows
		mkdir -p "$DIST_DIR"/mac
		mkdir -p "$DIST_DIR"/posix
		cp "$LIB_DIR/require.js" "$DIST_DIR"
		cp "$SRC_DIR/cmd.ts" "$DIST_DIR"
		cp "$SRC_DIR/repl.html" "$DIST_DIR"
		cp "$SRC_DIR/sink.ts" "$DIST_DIR"
		cp "$SRC_DIR/sink_shell.ts" "$DIST_DIR"
		cp "$TGT_DIR/cmd.d.ts" "$DIST_DIR"
		cp "$TGT_DIR/cmd.js" "$DIST_DIR"
		cp "$TGT_DIR/driver.js" "$DIST_DIR"
		cp "$TGT_DIR/sink.d.ts" "$DIST_DIR"
		cp "$TGT_DIR/sink.js" "$DIST_DIR"
		cp "$TGT_DIR/sink_shell.d.ts" "$DIST_DIR"
		cp "$TGT_DIR/sink_shell.js" "$DIST_DIR"
		echo 'You must copy the correct executables yourself, from tgt/ to dist/<platform>'
		;;
	*)
		echo './build <command> [debug]'
		echo ''
		echo 'Commands:'
		echo '  all       Build everything'
		echo '  ts        Build the TypeScript sources (node + browser)'
		echo '  c         Build the C source'
		echo '  mem       Build the C source with memory leak detection'
		echo '  clean     Delete the tgt directory'
		echo '  dist      Publish builds to ./dist'
		echo ''
		echo 'If "debug" is specified, then builds will be debug versions'
		exit 0
		;;
esac

EXIT=0

#
# TypeScript build
#
if [ "$BUILD_TS" = "1" ]; then
	echo Building TypeScript...
	mkdir -p $TGT_DIR
	pushd "$SRC_DIR" > /dev/null
	set +e
	npm run tsc
	status=$?
	set -e
	popd > /dev/null
	if [ "$status" != "0" ]; then
		echo 'TypeScript errors'
		exit 1
	fi
	cp $SRC_DIR/driver.js $TGT_DIR/driver.js
	chmod +x $TGT_DIR/driver.js
fi

#
# C build
#
if [ "$BUILD_C" = "1" ]; then
	echo Building C...
	mkdir -p $TGT_DIR
	if which clang > /dev/null; then
		if [ "$BUILD_MEM" = "1" ]; then
			C_OPTS="$C_OPTS -DSINK_MEMTEST"
			echo Memory Test
		elif [ "$BUILD_DEBUG" = "1" ]; then
			C_OPTS="$C_OPTS -g -DSINK_DEBUG"
			echo Debug Build
		else
			C_OPTS="$C_OPTS -O2"
		fi
		clang $C_OPTS              \
			-lm                    \
			-o $TGT_DIR/sink       \
			$SRC_DIR/sink.c        \
			$SRC_DIR/sink_shell.c  \
			$SRC_DIR/cmd.c
	else
		echo ''
		echo 'ERROR:'
		echo 'Missing "clang" which is required for building.'
		echo ''
		echo 'Skipping C build.'
		echo ''
		echo 'You can install "clang" by visiting:'
		echo '   http://llvm.org/'
		echo ''
		EXIT=1
	fi
fi

if [ "$EXIT" = "1" ]; then
	exit 1
fi
echo Done
