#
# sink - Minimal programming language for embedding small scripts in larger programs
# by Sean Connelly (@velipso), https://sean.fun
# Project Home: https://github.com/velipso/sink
# SPDX-License-Identifier: 0BSD
#

#
# this script will search for sink executables to test, and run the test suite against them
#

include 'shell'

# shitty windows detection
# TODO: fix
var windows = nil
if which 'node.exe'
	windows = 1
end

# TODO: use `path.join` once that works
var sep = pick windows, '\', '/'
var path_list = file.script | str.split sep
list.pop path_list
var tests_dir = path_list | list.join sep
list.pop path_list
var sink_dir = path_list | list.join sep
list.push path_list, 'tgt'
var tgt_dir = path_list | list.join sep
list.push path_list, 'bin.sink'
var bin_sink = path_list | list.join sep
list.pop path_list
list.push path_list, 'sink'
var sink_posix = path_list | list.join sep
list.pop path_list
list.push path_list, 'sink.exe'
var sink_win = path_list | list.join sep
list.pop path_list
list.push path_list, 'driver.js'
var sink_js = path_list | list.join sep

# search for sink executables to test
var sink_exes = {}
if file.exists sink_win
	say (str.pad 'Testing Windows:', 20), sink_win
	list.push sink_exes, sink_win
elseif file.exists sink_posix
	say (str.pad 'Testing POSIX:', 20), sink_posix
	list.push sink_exes, sink_posix
end
if file.exists sink_js
	say (str.pad 'Testing JavaScript:', 20), sink_js
	list.push sink_exes, sink_js
end
if &sink_exes == 0
	abort 'No sink executables found to test'
end

def dorun exe, args
	# if windows is attempting to run the node.js version, we have to pass through node.exe, instead
	# of running the .js file directly
	if windows && exe == sink_js
		return run 'node.exe', {exe} ~ args, nil, nil, 1
	end
	return run exe, args, nil, nil, 1
end

# get list of tests
var tests = {}
var tests_list = dir.list tests_dir
for var test: tests_list
	if +test[0] && test[1] == '.'
		list.push tests, test
	end
end
for var test: tests_list
	if +test[0] && +test[1] && test[2] == '.'
		list.push tests, test
	end
end

# grab the list of tests to run from args
if &args > 0
	var ftests = {}
	var a = args
	for var test: tests
		var found = nil
		for var f: a
			if str.begins test, f ~ '.'
				found = 1
				break
			end
		end
		if found
			list.push ftests, test
		end
	end
	tests = ftests
end

for var test: tests
	var test_dir = tests_dir ~ sep ~ test                       # TODO: path.join
	var test_num = +test
	var test_name = (test | str.split '.')[1:] | list.join '.'
	var test_script = test_dir ~ sep ~ test_name ~ '.sink'      # TODO: path.join
	var pass_file = test_dir ~ sep ~ 'pass.txt'                 # TODO: path.join
	var fail_file = test_dir ~ sep ~ 'fail.txt'                 # TODO: path.join

	declare test_failed
	declare check_diff

	var bin_data = nil
	for var sink_exe: sink_exes
		var pargs = {'-D', 'testinc', test_dir ~ sep ~ 'testinc-d.sink', test_script}

		# run the script
		var {status, stdout, stderr} = dorun sink_exe, pargs

		if status == 0
			#
			# script succeeded
			#

			# check stdout
			if !file.exists pass_file
				say stdout
				test_failed 'Expecting script to fail but it passed'
			end
			var answer = file.read pass_file
			check_diff answer, stdout

			# check compiling
			var {cstatus, cstdout, cstderr} = dorun sink_exe, {'-c', '-d'} ~ pargs
			if cstatus != 0
				say cstderr
				test_failed 'Failed to compile script'
			end
			if bin_data == nil
				bin_data = cstdout
			else
				if bin_data != cstdout
					say 'Compiler 1:', sink_exes[0]
					say 'Compiler 2:', sink_exe
					test_failed 'Mismatched compiler results'
				end
			end

			# check bytecode execution results
			file.write bin_sink, cstdout
			var {rstatus, rstdout, rstderr} = dorun sink_exe, {bin_sink}
			if rstatus != 0
				say rstderr
				test_failed 'Failed to execute bytecode'
			end
			check_diff answer, stdout
		else
			#
			# script failed
			#

			if file.exists pass_file
				say stderr
				test_failed 'Expecting script to pass but it failed'
			end
		end
	end

	def test_result res
		say (str.pad test_num, -4) ~ '.' ~ (str.pad test_name, 20) ~ res
	end

	def test_failed reason
		test_result 'FAIL'
		abort reason
	end

	def check_diff answer, actual
		if windows
			actual = actual | str.split "\r\n" | list.join "\n"
		end
		if answer == actual
			return
		end
		var ansf = tgt_dir ~ sep ~ 'temp1.txt'
		var actf = tgt_dir ~ sep ~ 'temp2.txt'
		file.write ansf, answer
		file.write actf, actual
		if which 'diff'
			run 'diff', {'-u', '--label', 'Expected Output', ansf, '--label', 'Actual Output', actf}
		else
			say '>> EXPECTED:'
			say answer
			say '>> ACTUAL:'
			say actual
		end
		test_failed 'Incorrect results'
	end

	# test passed
	test_result 'PASS'
end
